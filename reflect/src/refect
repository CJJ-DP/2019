import java.lang.reflect.*;
public class test {
    public test(){
        System.out.println("test");
    }
    public  test(Integer m){
        System.out.println("this is m"+m);
    }
    public  test(String S,Integer m){
        System.out.println("this is S m"+S+m);
    }
    public void fun(){System.out.println("fun");}
    public  void fun1(Integer m){System.out.println("this isfun "+m);}
    public  void fun2(String S,Integer m){System.out.println("this is S+m"+S+m);}
    public static void main(String []args)throws Exception{

        Class classinfo = Class.forName("java.util.Vector");

//        表示其构造函数
        Constructor cons[] = classinfo.getConstructors();
        System.out.println("Constructor");
        for (Constructor i:cons){
            System.out.println(i.toString());
        }
        Field fil[]  = classinfo.getDeclaredFields();
        System.out.println("Field:");
        for(Field i:fil){
            System.out.println(i.toString());
        }
        Method met[] = classinfo.getDeclaredMethods();
        System.out.println("Method");
        for(Method i:met){
            System.out.println(i.toString());
        }
        /**
         *  getConstructor()传参，parameterTypes表示必须指明构造方法的传参类型，可用Class数组或依次输入形式来表示传入参数类型
         *  newInstance（）传参，initargs表示必须指明构造方法的参数值，可用Object数组或者依次输入的形式来表示传入参数值
         */
        Class classinfo = Class.forName("test");

        Constructor cons[] = classinfo.getConstructors();
        for (Constructor i:cons){
            System.out.println(i.toString());
        }

        cons[2].newInstance();
        cons[1].newInstance(new Object[]{10});
        cons[0].newInstance(new Object[]{"Hello",2019});

        Constructor c = classinfo.getConstructor();
        c.newInstance();

        c = classinfo.getConstructor(new Class[]{Integer.class});
        c.newInstance(new Object[]{10});

        c = classinfo.getConstructor(new Class[]{String.class,Integer.class});
        c.newInstance(new Object[]{"Hello",2019});

        Object obj  = classinfo.getConstructor().newInstance();
        Method mt1 = classinfo.getMethod("fun");
        mt1.invoke(obj);
        Method mt2 = classinfo.getMethod("fun1",Integer.class);
        mt2.invoke(obj,new Object[]{10});
        Method mt3 = classinfo.getMethod("fun2",String.class,Integer.class);
        mt3.invoke(obj,new Object[]{"invole",2019});
    }

}
